name: Build and Test

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        java-version: [8, 11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build project
      run: mvn clean package -DskipTests
        
    - name: Copy XSD files to resources
      run: |
        mkdir -p xsd
        find libs/edifactconverter -name "*.xsd" -type f -exec cp {} xsd/ \;
        
    - name: Organize XSD files into version folders
      run: |
        cd xsd

        # Dynamically create directories and organize XSD files by version
        for file in *.xsd; do
          if [[ -f "$file" ]]; then
            # Extract version and prefix from filename
            # Supports both EDIFACTINTERCHANGE_APERAK_11A.xsd and ORDRSP_INVOIC_96A.xsd patterns
            if [[ $file =~ ^.*_([0-9][0-9][A-Z])\.xsd$ ]]; then
              version="${BASH_REMATCH[1]}"
              
              # Create directory for this version if it doesn't exist
              mkdir -p "EDIFACTINTERCHANGE_${version}"
              # Move file to appropriate version folder
              mv "$file" "EDIFACTINTERCHANGE_${version}/"
              echo "Organized $file -> EDIFACTINTERCHANGE_${version}/"
            fi
          fi
        done

    - name: Zip XSD files
      run: |
        zip -r xsd-files.zip xsd/

    - name: Upload XSD files
      uses: actions/upload-artifact@v4
      with:
        name: xsd-files.zip
        path: xsd-files.zip
        retention-days: 30

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-java-${{ matrix.java-version }}
        path: |
          **/target/surefire-reports/
          **/target/test-classes/
          
    - name: Upload JAR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jar-artifacts-java-${{ matrix.java-version }}
        path: |
          cpitoedifact-converter-core/target/*.jar
        retention-days: 30
        
    - name: Upload fat JAR
      uses: actions/upload-artifact@v4
      with:
        name: fat-jar-java-${{ matrix.java-version }}
        path: cpitoedifact-converter-core/target/*-fat.jar
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
        
    - name: Build and package
      run: mvn clean package -DskipTests

    - name: Copy XSD files to resources
      run: |
        find libs/edifactconverter -name "*.xsd" -type f -exec cp {} cpitoedifact-converter-core/target/ \;
        
    - name: Organize XSD files into version folders
      run: |
        cd cpitoedifact-converter-core/target
        
        # Dynamically create directories and organize XSD files by version
        for file in *.xsd; do
          if [[ -f "$file" ]]; then
            # Extract version and prefix from filename
            # Supports both EDIFACTINTERCHANGE_APERAK_11A.xsd and ORDRSP_INVOIC_96A.xsd patterns
            if [[ $file =~ ^.*_.*_([0-9][0-9][A-Z])\.xsd$ ]]; then
              prefix="${BASH_REMATCH[1]}"
              version="${BASH_REMATCH[2]}"
              
              # Create directory for this version if it doesn't exist
              mkdir -p "${prefix}_${version}"
              # Copy file to appropriate version folder
              cp "$file" "${prefix}_${version}/"
              echo "Organized $file -> ${prefix}_${version}/"
            fi
          fi
        done


    - name: Create release artifacts
      run: |
        mkdir -p release-artifacts
        cp cpitoedifact-converter-core/target/*.jar release-artifacts/        
    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: release-artifacts/
        retention-days: 90
